buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'xmlunit', name: 'xmlunit', version: '1.6'
    }
}

plugins {
    id 'de.dfki.mary.voicebuilding-legacy'
    id 'de.dfki.mary.voicebuilding-festvox'
}

marytts {
    voice {
        name = voiceName
        gender = voiceGender
        region = voiceLocaleRegion
        license {
            url = voiceLicenseUrl
        }
    }
}

def voiceLocale = new Locale.Builder()
        .setLanguage(voiceLocaleLanguage)
        .setRegion(voiceLocaleRegion)
        .build()

repositories {
    ivy {
        url 'https://dl.bintray.com/marytts/marytts'
        layout 'pattern', {
            artifact '[organisation]/[module]/[artifact].[ext]'
        }
    }
    ivy {
        url 'http://festvox.org/examples'
        layout 'pattern', {
            artifact '[module]_[classifier]/packed/[artifact].[ext]'
        }
    }
}

dependencies {
    data group: 'org.festvox', name: 'cmu_time_awb', classifier: 'ldom', ext: 'tar.bz2'
}

text {
    srcFile = file("$sourceSets.data.output.resourcesDir/time.data")
}

wav {
    doLast {
        ant.copy file: "$buildDir/wav/time0001.wav", tofile: "$buildDir/wav/unused.wav"
    }
}

basenames {
    textDir = text.destDir
    labDir = lab.destDir
    include 'time*', 'unused'
    exclude '*0023'
}

generateAllophones {
    srcDir = text.destDir
}

task testPlugins(group: 'Verification') {
    doLast {
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-legacy')
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-base')
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-data')
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-festvox')
    }
}

task testTemplates(group: 'Verification') {
    dependsOn templates
    doLast {
        assert fileTree(buildDir).include('templates/*.config').files
    }
}

task testLegacyInit(group: 'Verification') {
    dependsOn legacyInit
    doLast {
        assert file("$buildDir/database.config").exists()
    }
}

task testBasenames(group: 'Verification') {
    dependsOn basenames
    doLast {
        def basenamesFile = file("$buildDir/basenames.lst")
        assert basenamesFile.exists()
        def actual = basenamesFile.readLines() as Set
        def expected = fileTree("$buildDir/wav").include('*.wav').exclude('time0023.wav', 'unused.wav').collect {
            it.name - '.wav'
        } as Set
        assert actual == expected
    }
}

task testLegacyPhoneUnitLabelComputer(group: 'Verification') {
    dependsOn legacyPhoneUnitLabelComputer
    doLast {
        assert fileTree(buildDir).include('phonelab/*.lab').files
    }
}

task testLegacyHalfPhoneUnitLabelComputer(group: 'Verification') {
    dependsOn legacyHalfPhoneUnitLabelComputer
    doLast {
        assert fileTree(buildDir).include('halfphonelab/*.hplab').files
    }
}

task testLegacyTranscriptionAligner(group: 'Verification') {
    dependsOn legacyTranscriptionAligner
    doLast {
        assert fileTree(buildDir).include('allophones/*.xml').files
    }
}

task testFeatureLister(group: 'Verification') {
    dependsOn featureLister
    doLast {
        assert file("$buildDir/mary/features.txt").exists()
    }
}

task testPhoneUnitFeatureComputer(group: 'Verification') {
    dependsOn phoneUnitFeatureComputer
    doLast {
        assert fileTree(buildDir).include('phonefeatures/*.pfeats').files
    }
}

task testHalfPhoneUnitFeatureComputer(group: 'Verification') {
    dependsOn halfPhoneUnitFeatureComputer
    doLast {
        assert fileTree(buildDir).include('halfphonefeatures/*.hpfeats').files
    }
}

task testLegacyWaveTimelineMaker(group: 'Verification') {
    dependsOn legacyWaveTimelineMaker
    doLast {
        assert file("$buildDir/mary/timeline_waveforms.mry").exists()
    }
}

task testLegacyBasenameTimelineMaker(group: 'Verification') {
    dependsOn legacyBasenameTimelineMaker
    doLast {
        assert file("$buildDir/mary/timeline_basenames.mry").exists()
    }
}

task testLegacyMCepTimelineMaker(group: 'Verification') {
    dependsOn legacyMCepTimelineMaker
    doLast {
        assert file("$buildDir/mary/timeline_mcep.mry").exists()
    }
}

task testLegacyPhoneUnitfileWriter(group: 'Verification') {
    dependsOn legacyPhoneUnitfileWriter
    doLast {
        assert file("$buildDir/mary/phoneUnits.mry").exists()
    }
}

task testLegacyHalfPhoneUnitfileWriter(group: 'Verification') {
    dependsOn legacyHalfPhoneUnitfileWriter
    doLast {
        assert file("$buildDir/mary/halfphoneUnits.mry").exists()
    }
}

task testLegacyPhoneFeatureFileWriter(group: 'Verification') {
    dependsOn legacyPhoneFeatureFileWriter
    doLast {
        assert file("$buildDir/mary/phoneFeatures.mry").exists()
        assert file("$buildDir/mary/phoneUnitFeatureDefinition.txt").exists()
    }
}

task testLegacyHalfPhoneFeatureFileWriter(group: 'Verification') {
    dependsOn legacyHalfPhoneFeatureFileWriter
    doLast {
        assert file("$buildDir/mary/halfphoneFeatures.mry").exists()
        assert file("$buildDir/mary/halfphoneUnitFeatureDefinition.txt").exists()
    }
}

task testLegacyF0PolynomialFeatureFileWriter(group: 'Verification') {
    dependsOn legacyF0PolynomialFeatureFileWriter
    doLast {
        assert file("$buildDir/mary/syllableF0Polynomials.mry").exists()
    }
}

task testLegacyAcousticFeatureFileWriter(group: 'Verification') {
    dependsOn legacyAcousticFeatureFileWriter
    doLast {
        assert file("$buildDir/mary/halfphoneFeatures_ac.mry").exists()
        assert file("$buildDir/mary/halfphoneUnitFeatureDefinition_ac.txt").exists()
    }
}

task testLegacyJoinCostFileMaker(group: 'Verification') {
    dependsOn legacyJoinCostFileMaker
    doLast {
        assert file("$buildDir/mary/joinCostFeatures.mry").exists()
        assert file("$buildDir/mary/joinCostWeights.txt").exists()
    }
}

task testLegacyCARTBuilder(group: 'Verification') {
    dependsOn legacyCARTBuilder
    doLast {
        assert file("$buildDir/mary/cart.mry").exists()
    }
}

task testLegacyDurationCARTTrainer(group: 'Verification') {
    dependsOn legacyDurationCARTTrainer
    doLast {
        assert file("$buildDir/mary/dur.tree").exists()
    }
}

task testLegacyF0CARTTrainer(group: 'Verification') {
    dependsOn legacyF0CARTTrainer
    doLast {
        assert file("$buildDir/mary/f0.left.tree").exists()
        assert file("$buildDir/mary/f0.mid.tree").exists()
        assert file("$buildDir/mary/f0.right.tree").exists()
    }
}

task testProcessResources(group: 'Verification') {
    dependsOn processResources
    doLast {
        def prefix = "$sourceSets.main.output.resourcesDir/marytts/voice/$voiceNameCamelCase"
        assert file("$prefix/cart.mry").exists()
        assert file("$prefix/dur.tree").exists()
        assert file("$prefix/f0.left.tree").exists()
        assert file("$prefix/f0.mid.tree").exists()
        assert file("$prefix/f0.right.tree").exists()
        assert file("$prefix/halfphoneUnitFeatureDefinition_ac.txt").exists()
        assert file("$prefix/joinCostWeights.txt").exists()
    }
}

task testProcessLegacyResources(group: 'Verification') {
    dependsOn processLegacyResources
    doLast {
        def prefix = "$sourceSets.legacy.output.resourcesDir/lib/voices/$voiceName"
        assert file("$prefix/halfphoneFeatures_ac.mry").exists()
        assert file("$prefix/halfphoneUnits.mry").exists()
        assert file("$prefix/joinCostFeatures.mry").exists()
        assert file("$prefix/timeline_basenames.mry").exists()
        assert file("$prefix/timeline_waveforms.mry").exists()
    }
}

task testGenerateVoiceConfig(group: 'Verification') {
    dependsOn generateVoiceConfig
    doLast {
        def configFile = file("$buildDir/voice.config")
        assert configFile.exists()
        def actual = new Properties()
        configFile.withInputStream {
            actual.load it
        }
        def expected = [
                name                                         : "$voiceName",
                locale                                       : "$voiceLocale",
                'unitselection.voices.list'                  : "$voiceName",
                "voice.${voiceName}.acousticModels"          : 'duration F0 midF0 rightF0',
                "voice.${voiceName}.audioTimelineFile"       : "MARY_BASE/lib/voices/$voiceName/timeline_waveforms.mry",
                "voice.${voiceName}.audioTimelineReaderClass": 'marytts.unitselection.data.TimelineReader',
                "voice.${voiceName}.basenameTimeline"        : "MARY_BASE/lib/voices/$voiceName/timeline_basenames.mry",
                "voice.${voiceName}.cartFile"                : "jar:/marytts/voice/$voiceNameCamelCase/cart.mry",
                "voice.${voiceName}.cartReaderClass"         : 'marytts.cart.io.MARYCartReader',
                "voice.${voiceName}.concatenatorClass"       : 'marytts.unitselection.concat.OverlapUnitConcatenator',
                "voice.${voiceName}.databaseClass"           : 'marytts.unitselection.data.DiphoneUnitDatabase',
                "voice.${voiceName}.domain"                  : 'general',
                "voice.${voiceName}.duration.attribute"      : 'd',
                "voice.${voiceName}.duration.data"           : "jar:/marytts/voice/$voiceNameCamelCase/dur.tree",
                "voice.${voiceName}.duration.model"          : 'cart',
                "voice.${voiceName}.F0.applyTo"              : 'firstVoicedSegments',
                "voice.${voiceName}.F0.attribute"            : 'f0',
                "voice.${voiceName}.F0.attribute.format"     : '(0,%.0f)',
                "voice.${voiceName}.F0.data"                 : "jar:/marytts/voice/$voiceNameCamelCase/f0.left.tree",
                "voice.${voiceName}.F0.model"                : 'cart',
                "voice.${voiceName}.F0.predictFrom"          : 'firstVowels',
                "voice.${voiceName}.featureFile"             : "MARY_BASE/lib/voices/$voiceName/halfphoneFeatures_ac.mry",
                "voice.${voiceName}.gender"                  : "$voiceGender",
                "voice.${voiceName}.joinCostClass"           : 'marytts.unitselection.select.JoinCostFeatures',
                "voice.${voiceName}.joinCostFile"            : "MARY_BASE/lib/voices/$voiceName/joinCostFeatures.mry",
                "voice.${voiceName}.joinCostWeights"         : "jar:/marytts/voice/$voiceNameCamelCase/joinCostWeights.txt",
                "voice.${voiceName}.midF0.applyTo"           : 'firstVowels',
                "voice.${voiceName}.midF0.attribute"         : 'f0',
                "voice.${voiceName}.midF0.attribute.format"  : '(50,%.0f)',
                "voice.${voiceName}.midF0.data"              : "jar:/marytts/voice/$voiceNameCamelCase/f0.mid.tree",
                "voice.${voiceName}.midF0.model"             : 'cart',
                "voice.${voiceName}.midF0.predictFrom"       : 'firstVowels',
                "voice.${voiceName}.locale"                  : "$voiceLocale",
                "voice.${voiceName}.rightF0.applyTo"         : 'lastVoicedSegments',
                "voice.${voiceName}.rightF0.attribute"       : 'f0',
                "voice.${voiceName}.rightF0.attribute.format": '(100,%.0f)',
                "voice.${voiceName}.rightF0.data"            : "jar:/marytts/voice/$voiceNameCamelCase/f0.right.tree",
                "voice.${voiceName}.rightF0.model"           : 'cart',
                "voice.${voiceName}.rightF0.predictFrom"     : 'firstVowels',
                "voice.${voiceName}.samplingRate"            : '16000',
                "voice.${voiceName}.selectorClass"           : 'marytts.unitselection.select.DiphoneUnitSelector',
                "voice.${voiceName}.targetCostClass"         : 'marytts.unitselection.select.DiphoneFFRTargetCostFunction',
                "voice.${voiceName}.targetCostWeights"       : "jar:/marytts/voice/$voiceNameCamelCase/halfphoneUnitFeatureDefinition_ac.txt",
                "voice.${voiceName}.unitReaderClass"         : 'marytts.unitselection.data.UnitFileReader',
                "voice.${voiceName}.unitsFile"               : "MARY_BASE/lib/voices/$voiceName/halfphoneUnits.mry",
                "voice.${voiceName}.viterbi.beamsize"        : '100',
                "voice.${voiceName}.viterbi.wTargetCosts"    : '0.7'
        ] as Properties
        assert actual == expected
    }
}

import java.util.zip.ZipFile

task testJar(group: 'Verification') {
    dependsOn jar
    doLast {
        def actual = new ZipFile(jar.archivePath).entries().findAll { !it.isDirectory() }.collect { it.name } as Set
        def expected = [
                'META-INF/MANIFEST.MF',
                'META-INF/services/marytts.config.MaryConfig',
                "META-INF/maven/$project.group/voice-$voiceName/pom.xml",
                "META-INF/maven/$project.group/voice-$voiceName/pom.properties",
                "marytts/voice/$voiceNameCamelCase/Config.class",
                "marytts/voice/$voiceNameCamelCase/cart.mry",
                "marytts/voice/$voiceNameCamelCase/dur.tree",
                "marytts/voice/$voiceNameCamelCase/f0.left.tree",
                "marytts/voice/$voiceNameCamelCase/f0.mid.tree",
                "marytts/voice/$voiceNameCamelCase/f0.right.tree",
                "marytts/voice/$voiceNameCamelCase/halfphoneUnitFeatureDefinition_ac.txt",
                "marytts/voice/$voiceNameCamelCase/joinCostWeights.txt",
                "marytts/voice/$voiceNameCamelCase/voice.config"
        ] as Set
        assert actual == expected
    }
}

task testLegacyZip(group: 'Verification') {
    dependsOn legacyZip
    doLast {
        def actual = new ZipFile(legacyZip.archivePath).entries().findAll { !it.isDirectory() }.collect {
            it.name
        } as Set
        def expected = [
                "lib/voices/$voiceName/halfphoneFeatures_ac.mry",
                "lib/voices/$voiceName/halfphoneUnits.mry",
                "lib/voices/$voiceName/joinCostFeatures.mry",
                "lib/voices/$voiceName/timeline_basenames.mry",
                "lib/voices/$voiceName/timeline_waveforms.mry",
                "lib/$jar.archiveName"
        ] as Set
        assert actual == expected
    }
}

import org.custommonkey.xmlunit.XMLUnit

task testLegacyDescriptor(group: 'Verification') {
    dependsOn legacyDescriptor
    doLast {
        ant.checksum file: legacyZip.archivePath, algorithm: 'MD5', property: 'md5Hash'
        def expected = new groovy.xml.StreamingMarkupBuilder().bind {
            'marytts-install'(xmlns: "http://mary.dfki.de/installer") {
                voice(locale: voiceLocale, name: voiceName, gender: voiceGender, type: 'unit selection', version: version) {
                    delegate.description "A $voiceGender English unit selection voice"
                    license(href: voiceLicenseUrl)
                    delegate.package(md5sum: ant.md5Hash, filename: legacyZip.archiveName, size: legacyZip.archivePath.size()) {
                        location(folder: true, href: "http://mary.dfki.de/download/$maryVersion/")
                    }
                    depends(language: voiceLocale.toLanguageTag(), version: maryVersion)
                }
            }
        } as String
        def actual = legacyDescriptor.destFile.text
        XMLUnit.ignoreWhitespace = true
        assert XMLUnit.compareXML(expected, actual).similar()
    }
}
