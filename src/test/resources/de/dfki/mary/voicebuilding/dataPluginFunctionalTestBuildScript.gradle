plugins {
    id 'de.dfki.mary.voicebuilding-festvox' // transitively applies voicebuilding-data plugin
}

voice {
    gender = voiceGender
}

repositories {
    ivy {
        url 'https://dl.bintray.com/marytts/marytts'
        layout 'pattern', {
            artifact '[organisation]/[module]/[artifact].[ext]'
        }
    }
    ivy {
        url 'http://festvox.org/examples'
        layout 'pattern', {
            artifact '[module]_[classifier]/packed/[artifact].[ext]'
        }
    }
}

dependencies {
    data dataDependency
}

task testPlugins(group: 'Verification') {
    doLast {
        assert plugins.findPlugin('java')
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-base')
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-data')
    }
}

task testConfigurations(group: 'Verification') {
    doLast {
        assert configurations.data
        assert configurations.marytts
    }
}

task testSourceSets(group: 'Verification') {
    doLast {
        assert sourceSets.data
    }
}

task testDependencies(group: 'Verification') {
    doLast {
        assert configurations.data.dependencies.find { it.name == dataDependencyName }
        assert configurations.marytts.dependencies.find { it.name == "marytts-lang-$voice.locale.language" }
    }
}

task testProcessDataResources {
    group 'Verification'
    dependsOn processDataResources
    doLast {
        assert fileTree(sourceSets.data.output.resourcesDir).include('*.wav').files
        assert fileTree(sourceSets.data.output.resourcesDir).include('*.lab').files
        assert fileTree(sourceSets.data.output.resourcesDir).include('*.data').files
    }
}

text.srcFileName = 'time.data'

task testTemplates {
    group 'Verification'
    dependsOn templates
    doLast {
        def resourceFile = file("$buildDir/templates/extractPitch.praat")
        assert resourceFile.exists()
    }
}

generateAllophones.dependsOn text

task testWav {
    group 'Verification'
    dependsOn wav
    doLast {
        assert fileTree(buildDir).include('wav/*.wav').files
    }
}

task testPraatPitchExtractor {
    group 'Verification'
    dependsOn praatPitchExtractor
    doLast {
        assert fileTree(buildDir).include('Pitch/*.Pitch').files
    }
}

task testPraatPitchmarker {
    group 'Verification'
    dependsOn praatPitchmarker
    doLast {
        assert fileTree(buildDir).include('PointProcess/*.PointProcess').files
    }
}

task testPitchmarkConverter {
    group 'Verification'
    dependsOn pitchmarkConverter
    doLast {
        assert fileTree(buildDir).include('pm/*.pm').files
    }
}

task testMcepExtractor {
    group 'Verification'
    dependsOn mcepExtractor
    doLast {
        assert fileTree(buildDir).include('mcep/*.mcep').files
    }
}

task testText {
    group 'Verification'
    dependsOn text
    doLast {
        assert fileTree(buildDir).include('text/*.txt').files
    }
}

task testGenerateAllophones {
    group 'Verification'
    dependsOn generateAllophones
    doLast {
        assert fileTree(buildDir).include('prompt_allophones/*.xml').files
    }
}

task testGeneratePhoneFeatures {
    group 'Verification'
    dependsOn generatePhoneFeatures
    doLast {
        assert fileTree(buildDir).include('phonefeatures/*.pfeats').files
    }
}

task testGenerateHalfPhoneFeatures {
    group 'Verification'
    dependsOn generateHalfPhoneFeatures
    doLast {
        assert fileTree(buildDir).include('halfphonefeatures/*.hpfeats').files
    }
}
