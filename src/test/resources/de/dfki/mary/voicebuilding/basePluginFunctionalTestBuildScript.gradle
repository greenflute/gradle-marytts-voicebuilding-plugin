buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'xmlunit', name: 'xmlunit', version: '1.6'
    }
}

plugins {
    id 'de.dfki.mary.voicebuilding-base'
}

marytts {
    voice {
        name = voiceName
        license {
            name = voiceLicenseName
            url = voiceLicenseUrl
        }
    }
}

def voiceLocale = new Locale.Builder()
        .setLanguage(voiceLocaleLanguage)
        .setRegion(voiceLocaleRegion)
        .build()

task testPlugins(group: 'Verification') {
    doLast {
        assert plugins.findPlugin('java')
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-base')
    }
}

task testVoiceProps(group: 'Verification') {
    doLast {
        assert marytts.voice.name == voiceName
        assert marytts.voice.language == voiceLocale.language
        assert marytts.voice.region == voiceLocale.country
        assert marytts.voice.nameCamelCase == voiceNameCamelCase
        assert marytts.voice.locale == voiceLocale
        assert marytts.voice.localeXml == voiceLocale.toLanguageTag()
        assert marytts.voice.description == voiceDescription
        assert marytts.voice.samplingRate == voiceSamplingRate as int
        assert marytts.voice.license?.name == voiceLicenseName
    }
}

task testJavaCompatibility(group: 'Verification') {
    doLast {
        assert "$sourceCompatibility" == '1.8'
        assert "$targetCompatibility" == '1.8'
    }
}

task testGenerateSource(group: 'Verification') {
    dependsOn generateSource
    doLast {
        assert file("$buildDir/generatedSrc/main/java/marytts/voice/$marytts.voice.nameCamelCase/Config.java").exists()
    }
}

task testCompileJava(group: 'Verification') {
    dependsOn compileJava
    doLast {
        assert file("$buildDir/classes/java/main/marytts/voice/$marytts.voice.nameCamelCase/Config.class").exists()
    }
}

task testCompileTestJava(group: 'Verification') {
    dependsOn compileTestJava
    doLast {
        assert file("$buildDir/classes/java/test/marytts/voice/$marytts.voice.nameCamelCase/ConfigTest.class").exists()
    }
}

task testCompileIntegrationTestGroovy(group: 'Verification') {
    dependsOn compileIntegrationTestGroovy
    doLast {
        assert file("$buildDir/classes/groovy/integrationTest/marytts/voice/$marytts.voice.nameCamelCase/LoadVoiceIT.class").exists()
    }
}

task testGenerateVoiceConfig(group: 'Verification') {
    dependsOn generateVoiceConfig
    doLast {
        def configFile = file("$buildDir/voice.config")
        assert configFile.exists()
        def actual = new Properties()
        configFile.withInputStream {
            actual.load it
        }
        def expected = [
                name                             : voiceName,
                locale                           : "$voiceLocale",
                'unitselection.voices.list'      : voiceName,
                "voice.${voiceName}.domain"      : 'general',
                "voice.${voiceName}.gender"      : voiceGender,
                "voice.${voiceName}.locale"      : "$voiceLocale",
                "voice.${voiceName}.samplingRate": voiceSamplingRate
        ] as Properties
        assert actual == expected
    }
}

task testGenerateServiceLoader(group: 'Verification') {
    dependsOn generateServiceLoader
    doLast {
        def serviceLoaderFile = file("$buildDir/serviceLoader.txt")
        assert serviceLoaderFile.exists()
        assert serviceLoaderFile.text == "marytts.voice.${marytts.voice.nameCamelCase}.Config"
    }
}

import groovy.xml.XmlUtil
import org.custommonkey.xmlunit.XMLUnit
import org.custommonkey.xmlunit.examples.RecursiveElementNameAndTextQualifier

task testGeneratePomFileForMavenJavaPublication(group: 'Verification') {
    dependsOn generatePomFileForMavenJavaPublication
    doLast {
        def pomFile = file("$buildDir/publications/mavenJava/pom-default.xml")
        assert pomFile.exists()
        def pomXml = new groovy.xml.StreamingMarkupBuilder().bind {
            project(xmlns: "http://maven.apache.org/POM/4.0.0",
                    'xmlns:xsi': "http://www.w3.org/2001/XMLSchema-instance",
                    'xsi:schemaLocation': "http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd") {
                modelVersion '4.0.0'
                groupId project.group
                artifactId projectDir.name
                delegate.version project.version
                delegate.description voiceDescription
                licenses {
                    license {
                        delegate.name voiceLicenseName
                        url voiceLicenseUrl
                    }
                }
                delegate.dependencies {
                    dependency {
                        groupId 'de.dfki.mary'
                        artifactId 'marytts-runtime'
                        delegate.version maryVersion
                        scope 'compile'
                        exclusions {
                            exclusion {
                                artifactId 'groovy-all'
                                groupId '*'
                            }
                        }
                    }
                    dependency {
                        groupId 'de.dfki.mary'
                        artifactId "marytts-lang-$voiceLocale.language"
                        delegate.version maryVersion
                        scope 'runtime'
                        exclusions {
                            exclusion {
                                artifactId 'groovy-all'
                                groupId '*'
                            }
                        }
                    }
                }
            }
        } as String
        XMLUnit.ignoreWhitespace = true
        def diff = XMLUnit.compareXML(pomXml, pomFile.text)
        diff.overrideElementQualifier(new RecursiveElementNameAndTextQualifier())
        if (!diff.similar()) {
            println XmlUtil.serialize(pomXml)
        }
        assert diff.similar()
    }
}

task testGeneratePomProperties(group: 'Verification') {
    dependsOn generatePomProperties
    doLast {
        def pomPropertiesFile = file("$buildDir/pom.properties")
        assert pomPropertiesFile.exists()
        def actual = new Properties()
        pomPropertiesFile.withInputStream {
            actual.load it
        }
        def expected = [
                groupId   : project.group,
                artifactId: projectDir.name,
                version   : version
        ] as Properties
        assert actual == expected
    }
}

import java.util.zip.ZipFile

task testJar(group: 'Verification') {
    dependsOn jar
    doLast {
        def actual = new ZipFile(jar.archivePath).entries().findAll { !it.isDirectory() }.collect { it.name } as Set
        def expected = [
                'META-INF/MANIFEST.MF',
                'META-INF/services/marytts.config.MaryConfig',
                "META-INF/maven/$project.group/voice-$voiceName/pom.xml",
                "META-INF/maven/$project.group/voice-$voiceName/pom.properties",
                "marytts/voice/$voiceNameCamelCase/Config.class",
                "marytts/voice/$voiceNameCamelCase/voice.config"
        ] as Set
        assert actual == expected
    }
}
